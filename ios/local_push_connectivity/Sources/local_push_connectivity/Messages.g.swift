// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsMessages(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsMessages(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsMessages(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashMessages(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashMessages(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashMessages(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

enum ConnectionType: Int {
  case tcp = 0
  case tcpTls = 1
  case ws = 2
  case wss = 3
}

/// Generated class from Pigeon that represents data sent in messages.
struct TCPModePigeon: Hashable {
  var host: String
  var port: Int64
  var connectionType: ConnectionType
  /// Path for ws and wss
  var path: String? = nil
  /// for tcpTls
  var publicHasKey: String? = nil
  /// for tcpTls & Platform windows
  var cnName: String? = nil
  /// for tcpTls & Platform windows
  var dnsName: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> TCPModePigeon? {
    let host = pigeonVar_list[0] as! String
    let port = pigeonVar_list[1] as! Int64
    let connectionType = pigeonVar_list[2] as! ConnectionType
    let path: String? = nilOrValue(pigeonVar_list[3])
    let publicHasKey: String? = nilOrValue(pigeonVar_list[4])
    let cnName: String? = nilOrValue(pigeonVar_list[5])
    let dnsName: String? = nilOrValue(pigeonVar_list[6])

    return TCPModePigeon(
      host: host,
      port: port,
      connectionType: connectionType,
      path: path,
      publicHasKey: publicHasKey,
      cnName: cnName,
      dnsName: dnsName
    )
  }
  func toList() -> [Any?] {
    return [
      host,
      port,
      connectionType,
      path,
      publicHasKey,
      cnName,
      dnsName,
    ]
  }
  static func == (lhs: TCPModePigeon, rhs: TCPModePigeon) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct AndroidSettingsPigeon: Hashable {
  var icon: String
  var channelNotification: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> AndroidSettingsPigeon? {
    let icon = pigeonVar_list[0] as! String
    let channelNotification = pigeonVar_list[1] as! String

    return AndroidSettingsPigeon(
      icon: icon,
      channelNotification: channelNotification
    )
  }
  func toList() -> [Any?] {
    return [
      icon,
      channelNotification,
    ]
  }
  static func == (lhs: AndroidSettingsPigeon, rhs: AndroidSettingsPigeon) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct WindowsSettingsPigeon: Hashable {
  var displayName: String
  var bundleId: String
  var icon: String
  var iconContent: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> WindowsSettingsPigeon? {
    let displayName = pigeonVar_list[0] as! String
    let bundleId = pigeonVar_list[1] as! String
    let icon = pigeonVar_list[2] as! String
    let iconContent = pigeonVar_list[3] as! String

    return WindowsSettingsPigeon(
      displayName: displayName,
      bundleId: bundleId,
      icon: icon,
      iconContent: iconContent
    )
  }
  func toList() -> [Any?] {
    return [
      displayName,
      bundleId,
      icon,
      iconContent,
    ]
  }
  static func == (lhs: WindowsSettingsPigeon, rhs: WindowsSettingsPigeon) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct IosSettingsPigeon: Hashable {
  var ssids: [String]? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> IosSettingsPigeon? {
    let ssids: [String]? = nilOrValue(pigeonVar_list[0])

    return IosSettingsPigeon(
      ssids: ssids
    )
  }
  func toList() -> [Any?] {
    return [
      ssids
    ]
  }
  static func == (lhs: IosSettingsPigeon, rhs: IosSettingsPigeon) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct UserPigeon: Hashable {
  var connectorID: String
  var connectorTag: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> UserPigeon? {
    let connectorID = pigeonVar_list[0] as! String
    let connectorTag = pigeonVar_list[1] as! String

    return UserPigeon(
      connectorID: connectorID,
      connectorTag: connectorTag
    )
  }
  func toList() -> [Any?] {
    return [
      connectorID,
      connectorTag,
    ]
  }
  static func == (lhs: UserPigeon, rhs: UserPigeon) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NotificationPigeon: Hashable {
  var title: String
  var body: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> NotificationPigeon? {
    let title = pigeonVar_list[0] as! String
    let body = pigeonVar_list[1] as! String

    return NotificationPigeon(
      title: title,
      body: body
    )
  }
  func toList() -> [Any?] {
    return [
      title,
      body,
    ]
  }
  static func == (lhs: NotificationPigeon, rhs: NotificationPigeon) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MessageResponsePigeon: Hashable {
  var notification: NotificationPigeon
  var mPayload: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MessageResponsePigeon? {
    let notification = pigeonVar_list[0] as! NotificationPigeon
    let mPayload = pigeonVar_list[1] as! String

    return MessageResponsePigeon(
      notification: notification,
      mPayload: mPayload
    )
  }
  func toList() -> [Any?] {
    return [
      notification,
      mPayload,
    ]
  }
  static func == (lhs: MessageResponsePigeon, rhs: MessageResponsePigeon) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MessageSystemPigeon: Hashable {
  var fromNotification: Bool
  var mrp: MessageResponsePigeon


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MessageSystemPigeon? {
    let fromNotification = pigeonVar_list[0] as! Bool
    let mrp = pigeonVar_list[1] as! MessageResponsePigeon

    return MessageSystemPigeon(
      fromNotification: fromNotification,
      mrp: mrp
    )
  }
  func toList() -> [Any?] {
    return [
      fromNotification,
      mrp,
    ]
  }
  static func == (lhs: MessageSystemPigeon, rhs: MessageSystemPigeon) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct RegisterMessagePigeon: Hashable {
  var messageType: String
  var sendConnectorID: String
  var sendDeviceId: String
  var systemType: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> RegisterMessagePigeon? {
    let messageType = pigeonVar_list[0] as! String
    let sendConnectorID = pigeonVar_list[1] as! String
    let sendDeviceId = pigeonVar_list[2] as! String
    let systemType = pigeonVar_list[3] as! Int64

    return RegisterMessagePigeon(
      messageType: messageType,
      sendConnectorID: sendConnectorID,
      sendDeviceId: sendDeviceId,
      systemType: systemType
    )
  }
  func toList() -> [Any?] {
    return [
      messageType,
      sendConnectorID,
      sendDeviceId,
      systemType,
    ]
  }
  static func == (lhs: RegisterMessagePigeon, rhs: RegisterMessagePigeon) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PluginSettingsPigeon: Hashable {
  var host: String? = nil
  var deviceId: String? = nil
  var connectorID: String? = nil
  var systemType: Int64? = nil
  var iconNotification: String? = nil
  var port: Int64? = nil
  var channelNotification: String? = nil
  var wss: Bool? = nil
  var wsPath: String? = nil
  var useTcp: Bool? = nil
  var publicKey: String? = nil
  var connectorTag: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PluginSettingsPigeon? {
    let host: String? = nilOrValue(pigeonVar_list[0])
    let deviceId: String? = nilOrValue(pigeonVar_list[1])
    let connectorID: String? = nilOrValue(pigeonVar_list[2])
    let systemType: Int64? = nilOrValue(pigeonVar_list[3])
    let iconNotification: String? = nilOrValue(pigeonVar_list[4])
    let port: Int64? = nilOrValue(pigeonVar_list[5])
    let channelNotification: String? = nilOrValue(pigeonVar_list[6])
    let wss: Bool? = nilOrValue(pigeonVar_list[7])
    let wsPath: String? = nilOrValue(pigeonVar_list[8])
    let useTcp: Bool? = nilOrValue(pigeonVar_list[9])
    let publicKey: String? = nilOrValue(pigeonVar_list[10])
    let connectorTag: String? = nilOrValue(pigeonVar_list[11])

    return PluginSettingsPigeon(
      host: host,
      deviceId: deviceId,
      connectorID: connectorID,
      systemType: systemType,
      iconNotification: iconNotification,
      port: port,
      channelNotification: channelNotification,
      wss: wss,
      wsPath: wsPath,
      useTcp: useTcp,
      publicKey: publicKey,
      connectorTag: connectorTag
    )
  }
  func toList() -> [Any?] {
    return [
      host,
      deviceId,
      connectorID,
      systemType,
      iconNotification,
      port,
      channelNotification,
      wss,
      wsPath,
      useTcp,
      publicKey,
      connectorTag,
    ]
  }
  static func == (lhs: PluginSettingsPigeon, rhs: PluginSettingsPigeon) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

private class MessagesPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return ConnectionType(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      return TCPModePigeon.fromList(self.readValue() as! [Any?])
    case 131:
      return AndroidSettingsPigeon.fromList(self.readValue() as! [Any?])
    case 132:
      return WindowsSettingsPigeon.fromList(self.readValue() as! [Any?])
    case 133:
      return IosSettingsPigeon.fromList(self.readValue() as! [Any?])
    case 134:
      return UserPigeon.fromList(self.readValue() as! [Any?])
    case 135:
      return NotificationPigeon.fromList(self.readValue() as! [Any?])
    case 136:
      return MessageResponsePigeon.fromList(self.readValue() as! [Any?])
    case 137:
      return MessageSystemPigeon.fromList(self.readValue() as! [Any?])
    case 138:
      return RegisterMessagePigeon.fromList(self.readValue() as! [Any?])
    case 139:
      return PluginSettingsPigeon.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class MessagesPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ConnectionType {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? TCPModePigeon {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? AndroidSettingsPigeon {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? WindowsSettingsPigeon {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? IosSettingsPigeon {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? UserPigeon {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? NotificationPigeon {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? MessageResponsePigeon {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? MessageSystemPigeon {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else if let value = value as? RegisterMessagePigeon {
      super.writeByte(138)
      super.writeValue(value.toList())
    } else if let value = value as? PluginSettingsPigeon {
      super.writeByte(139)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MessagesPigeonCodecWriter(data: data)
  }
}

class MessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = MessagesPigeonCodec(readerWriter: MessagesPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol LocalPushConnectivityPigeonHostApi {
  func initialize(systemType: Int64, android: AndroidSettingsPigeon?, windows: WindowsSettingsPigeon?, ios: IosSettingsPigeon?, mode: TCPModePigeon, completion: @escaping (Result<Bool, Error>) -> Void)
  func flutterApiReady(completion: @escaping (Result<Void, Error>) -> Void)
  func config(mode: TCPModePigeon, ssids: [String]?, completion: @escaping (Result<Bool, Error>) -> Void)
  func registerUser(user: UserPigeon, completion: @escaping (Result<Bool, Error>) -> Void)
  func deviceID(completion: @escaping (Result<String, Error>) -> Void)
  func requestPermission(completion: @escaping (Result<Bool, Error>) -> Void)
  func start(completion: @escaping (Result<Bool, Error>) -> Void)
  func stop(completion: @escaping (Result<Bool, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class LocalPushConnectivityPigeonHostApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `LocalPushConnectivityPigeonHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: LocalPushConnectivityPigeonHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.initialize\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let systemTypeArg = args[0] as! Int64
        let androidArg: AndroidSettingsPigeon? = nilOrValue(args[1])
        let windowsArg: WindowsSettingsPigeon? = nilOrValue(args[2])
        let iosArg: IosSettingsPigeon? = nilOrValue(args[3])
        let modeArg = args[4] as! TCPModePigeon
        api.initialize(systemType: systemTypeArg, android: androidArg, windows: windowsArg, ios: iosArg, mode: modeArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let flutterApiReadyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.flutterApiReady\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      flutterApiReadyChannel.setMessageHandler { _, reply in
        api.flutterApiReady { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      flutterApiReadyChannel.setMessageHandler(nil)
    }
    let configChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.config\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      configChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let modeArg = args[0] as! TCPModePigeon
        let ssidsArg: [String]? = nilOrValue(args[1])
        api.config(mode: modeArg, ssids: ssidsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      configChannel.setMessageHandler(nil)
    }
    let registerUserChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.registerUser\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      registerUserChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userArg = args[0] as! UserPigeon
        api.registerUser(user: userArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      registerUserChannel.setMessageHandler(nil)
    }
    let deviceIDChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.deviceID\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deviceIDChannel.setMessageHandler { _, reply in
        api.deviceID { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      deviceIDChannel.setMessageHandler(nil)
    }
    let requestPermissionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.requestPermission\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestPermissionChannel.setMessageHandler { _, reply in
        api.requestPermission { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      requestPermissionChannel.setMessageHandler(nil)
    }
    let startChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.start\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startChannel.setMessageHandler { _, reply in
        api.start { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startChannel.setMessageHandler(nil)
    }
    let stopChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.stop\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopChannel.setMessageHandler { _, reply in
        api.stop { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      stopChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol LocalPushConnectivityPigeonFlutterApiProtocol {
  func onMessage(mrp mrpArg: MessageSystemPigeon, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class LocalPushConnectivityPigeonFlutterApi: LocalPushConnectivityPigeonFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: MessagesPigeonCodec {
    return MessagesPigeonCodec.shared
  }
  func onMessage(mrp mrpArg: MessageSystemPigeon, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonFlutterApi.onMessage\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([mrpArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
