// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


enum ConnectionType {
  tcp,
  tcpTls,
  ws,
  wss,
}

class TCPModePigeon {
  TCPModePigeon({
    required this.host,
    required this.port,
    required this.connectionType,
    this.path,
    this.publicHasKey,
    this.cnName,
    this.dnsName,
  });

  String host;

  int port;

  ConnectionType connectionType;

  /// Path for ws and wss
  String? path;

  /// for tcpTls
  String? publicHasKey;

  /// for tcpTls & Platform windows
  String? cnName;

  /// for tcpTls & Platform windows
  String? dnsName;

  List<Object?> _toList() {
    return <Object?>[
      host,
      port,
      connectionType,
      path,
      publicHasKey,
      cnName,
      dnsName,
    ];
  }

  Object encode() {
    return _toList();  }

  static TCPModePigeon decode(Object result) {
    result as List<Object?>;
    return TCPModePigeon(
      host: result[0]! as String,
      port: result[1]! as int,
      connectionType: result[2]! as ConnectionType,
      path: result[3] as String?,
      publicHasKey: result[4] as String?,
      cnName: result[5] as String?,
      dnsName: result[6] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! TCPModePigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class AndroidSettingsPigeon {
  AndroidSettingsPigeon({
    required this.icon,
    required this.channelNotification,
  });

  String icon;

  String channelNotification;

  List<Object?> _toList() {
    return <Object?>[
      icon,
      channelNotification,
    ];
  }

  Object encode() {
    return _toList();  }

  static AndroidSettingsPigeon decode(Object result) {
    result as List<Object?>;
    return AndroidSettingsPigeon(
      icon: result[0]! as String,
      channelNotification: result[1]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! AndroidSettingsPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class WindowsSettingsPigeon {
  WindowsSettingsPigeon({
    required this.displayName,
    required this.bundleId,
    required this.icon,
    required this.iconContent,
  });

  String displayName;

  String bundleId;

  String icon;

  String iconContent;

  List<Object?> _toList() {
    return <Object?>[
      displayName,
      bundleId,
      icon,
      iconContent,
    ];
  }

  Object encode() {
    return _toList();  }

  static WindowsSettingsPigeon decode(Object result) {
    result as List<Object?>;
    return WindowsSettingsPigeon(
      displayName: result[0]! as String,
      bundleId: result[1]! as String,
      icon: result[2]! as String,
      iconContent: result[3]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! WindowsSettingsPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class IosSettingsPigeon {
  IosSettingsPigeon({
    this.ssids,
  });

  List<String>? ssids;

  List<Object?> _toList() {
    return <Object?>[
      ssids,
    ];
  }

  Object encode() {
    return _toList();  }

  static IosSettingsPigeon decode(Object result) {
    result as List<Object?>;
    return IosSettingsPigeon(
      ssids: (result[0] as List<Object?>?)?.cast<String>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! IosSettingsPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class UserPigeon {
  UserPigeon({
    required this.connectorID,
    required this.connectorTag,
  });

  String connectorID;

  String connectorTag;

  List<Object?> _toList() {
    return <Object?>[
      connectorID,
      connectorTag,
    ];
  }

  Object encode() {
    return _toList();  }

  static UserPigeon decode(Object result) {
    result as List<Object?>;
    return UserPigeon(
      connectorID: result[0]! as String,
      connectorTag: result[1]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! UserPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class NotificationPigeon {
  NotificationPigeon({
    required this.title,
    required this.body,
  });

  String title;

  String body;

  List<Object?> _toList() {
    return <Object?>[
      title,
      body,
    ];
  }

  Object encode() {
    return _toList();  }

  static NotificationPigeon decode(Object result) {
    result as List<Object?>;
    return NotificationPigeon(
      title: result[0]! as String,
      body: result[1]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NotificationPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class MessageResponsePigeon {
  MessageResponsePigeon({
    required this.notification,
    required this.mPayload,
  });

  NotificationPigeon notification;

  String mPayload;

  List<Object?> _toList() {
    return <Object?>[
      notification,
      mPayload,
    ];
  }

  Object encode() {
    return _toList();  }

  static MessageResponsePigeon decode(Object result) {
    result as List<Object?>;
    return MessageResponsePigeon(
      notification: result[0]! as NotificationPigeon,
      mPayload: result[1]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MessageResponsePigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class MessageSystemPigeon {
  MessageSystemPigeon({
    required this.fromNotification,
    required this.mrp,
  });

  bool fromNotification;

  MessageResponsePigeon mrp;

  List<Object?> _toList() {
    return <Object?>[
      fromNotification,
      mrp,
    ];
  }

  Object encode() {
    return _toList();  }

  static MessageSystemPigeon decode(Object result) {
    result as List<Object?>;
    return MessageSystemPigeon(
      fromNotification: result[0]! as bool,
      mrp: result[1]! as MessageResponsePigeon,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MessageSystemPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class RegisterMessagePigeon {
  RegisterMessagePigeon({
    required this.messageType,
    required this.sendConnectorID,
    required this.sendDeviceId,
    required this.systemType,
  });

  String messageType;

  String sendConnectorID;

  String sendDeviceId;

  int systemType;

  List<Object?> _toList() {
    return <Object?>[
      messageType,
      sendConnectorID,
      sendDeviceId,
      systemType,
    ];
  }

  Object encode() {
    return _toList();  }

  static RegisterMessagePigeon decode(Object result) {
    result as List<Object?>;
    return RegisterMessagePigeon(
      messageType: result[0]! as String,
      sendConnectorID: result[1]! as String,
      sendDeviceId: result[2]! as String,
      systemType: result[3]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! RegisterMessagePigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class PluginSettingsPigeon {
  PluginSettingsPigeon({
    this.host,
    this.deviceId,
    this.connectorID,
    this.systemType,
    this.iconNotification,
    this.port,
    this.channelNotification,
    this.wss,
    this.wsPath,
    this.useTcp,
    this.publicKey,
    this.connectorTag,
  });

  String? host;

  String? deviceId;

  String? connectorID;

  int? systemType;

  String? iconNotification;

  int? port;

  String? channelNotification;

  bool? wss;

  String? wsPath;

  bool? useTcp;

  String? publicKey;

  String? connectorTag;

  List<Object?> _toList() {
    return <Object?>[
      host,
      deviceId,
      connectorID,
      systemType,
      iconNotification,
      port,
      channelNotification,
      wss,
      wsPath,
      useTcp,
      publicKey,
      connectorTag,
    ];
  }

  Object encode() {
    return _toList();  }

  static PluginSettingsPigeon decode(Object result) {
    result as List<Object?>;
    return PluginSettingsPigeon(
      host: result[0] as String?,
      deviceId: result[1] as String?,
      connectorID: result[2] as String?,
      systemType: result[3] as int?,
      iconNotification: result[4] as String?,
      port: result[5] as int?,
      channelNotification: result[6] as String?,
      wss: result[7] as bool?,
      wsPath: result[8] as String?,
      useTcp: result[9] as bool?,
      publicKey: result[10] as String?,
      connectorTag: result[11] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PluginSettingsPigeon || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is ConnectionType) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is TCPModePigeon) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    }    else if (value is AndroidSettingsPigeon) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is WindowsSettingsPigeon) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    }    else if (value is IosSettingsPigeon) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    }    else if (value is UserPigeon) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    }    else if (value is NotificationPigeon) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    }    else if (value is MessageResponsePigeon) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    }    else if (value is MessageSystemPigeon) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    }    else if (value is RegisterMessagePigeon) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    }    else if (value is PluginSettingsPigeon) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ConnectionType.values[value];
      case 130: 
        return TCPModePigeon.decode(readValue(buffer)!);
      case 131: 
        return AndroidSettingsPigeon.decode(readValue(buffer)!);
      case 132: 
        return WindowsSettingsPigeon.decode(readValue(buffer)!);
      case 133: 
        return IosSettingsPigeon.decode(readValue(buffer)!);
      case 134: 
        return UserPigeon.decode(readValue(buffer)!);
      case 135: 
        return NotificationPigeon.decode(readValue(buffer)!);
      case 136: 
        return MessageResponsePigeon.decode(readValue(buffer)!);
      case 137: 
        return MessageSystemPigeon.decode(readValue(buffer)!);
      case 138: 
        return RegisterMessagePigeon.decode(readValue(buffer)!);
      case 139: 
        return PluginSettingsPigeon.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class LocalPushConnectivityPigeonHostApi {
  /// Constructor for [LocalPushConnectivityPigeonHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  LocalPushConnectivityPigeonHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<bool> initialize({required int systemType, AndroidSettingsPigeon? android, WindowsSettingsPigeon? windows, IosSettingsPigeon? ios, required TCPModePigeon mode, }) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.initialize$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[systemType, android, windows, ios, mode]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> flutterApiReady() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.flutterApiReady$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> config(TCPModePigeon mode, [List<String>? ssids]) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.config$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[mode, ssids]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> registerUser(UserPigeon user) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.registerUser$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[user]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<String> deviceID() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.deviceID$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<bool> requestPermission() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.requestPermission$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> start() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.start$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> stop() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.stop$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }
}

abstract class LocalPushConnectivityPigeonFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  Future<void> onMessage(MessageSystemPigeon mrp);

  static void setUp(LocalPushConnectivityPigeonFlutterApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonFlutterApi.onMessage$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonFlutterApi.onMessage was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MessageSystemPigeon? arg_mrp = (args[0] as MessageSystemPigeon?);
          assert(arg_mrp != null,
              'Argument for dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonFlutterApi.onMessage was null, expected non-null MessageSystemPigeon.');
          try {
            await api.onMessage(arg_mrp!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
