// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.hodoan.local_push_connectivity

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object MessagesPigeonUtils {

  fun createConnectionError(channelName: String): FlutterError {
    return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")  }

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class ConnectionType(val raw: Int) {
  TCP(0),
  TCP_TLS(1),
  WS(2),
  WSS(3);

  companion object {
    fun ofRaw(raw: Int): ConnectionType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class TCPModePigeon (
  val host: String,
  val port: Long,
  val connectionType: ConnectionType,
  /** Path for ws and wss */
  val path: String? = null,
  /** for tcpTls */
  val publicHasKey: String? = null,
  /** for tcpTls & Platform windows */
  val cnName: String? = null,
  /** for tcpTls & Platform windows */
  val dnsName: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): TCPModePigeon {
      val host = pigeonVar_list[0] as String
      val port = pigeonVar_list[1] as Long
      val connectionType = pigeonVar_list[2] as ConnectionType
      val path = pigeonVar_list[3] as String?
      val publicHasKey = pigeonVar_list[4] as String?
      val cnName = pigeonVar_list[5] as String?
      val dnsName = pigeonVar_list[6] as String?
      return TCPModePigeon(host, port, connectionType, path, publicHasKey, cnName, dnsName)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      host,
      port,
      connectionType,
      path,
      publicHasKey,
      cnName,
      dnsName,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is TCPModePigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AndroidSettingsPigeon (
  val icon: String,
  val channelNotification: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AndroidSettingsPigeon {
      val icon = pigeonVar_list[0] as String
      val channelNotification = pigeonVar_list[1] as String
      return AndroidSettingsPigeon(icon, channelNotification)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      icon,
      channelNotification,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AndroidSettingsPigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class WindowsSettingsPigeon (
  val displayName: String,
  val bundleId: String,
  val icon: String,
  val iconContent: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): WindowsSettingsPigeon {
      val displayName = pigeonVar_list[0] as String
      val bundleId = pigeonVar_list[1] as String
      val icon = pigeonVar_list[2] as String
      val iconContent = pigeonVar_list[3] as String
      return WindowsSettingsPigeon(displayName, bundleId, icon, iconContent)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      displayName,
      bundleId,
      icon,
      iconContent,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is WindowsSettingsPigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class IosSettingsPigeon (
  val ssids: List<String>? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): IosSettingsPigeon {
      val ssids = pigeonVar_list[0] as List<String>?
      return IosSettingsPigeon(ssids)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ssids,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is IosSettingsPigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class UserPigeon (
  val connectorID: String,
  val connectorTag: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): UserPigeon {
      val connectorID = pigeonVar_list[0] as String
      val connectorTag = pigeonVar_list[1] as String
      return UserPigeon(connectorID, connectorTag)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      connectorID,
      connectorTag,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is UserPigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NotificationPigeon (
  val title: String,
  val body: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NotificationPigeon {
      val title = pigeonVar_list[0] as String
      val body = pigeonVar_list[1] as String
      return NotificationPigeon(title, body)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      title,
      body,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is NotificationPigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MessageResponsePigeon (
  val notification: NotificationPigeon,
  val mPayload: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MessageResponsePigeon {
      val notification = pigeonVar_list[0] as NotificationPigeon
      val mPayload = pigeonVar_list[1] as String
      return MessageResponsePigeon(notification, mPayload)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      notification,
      mPayload,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is MessageResponsePigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MessageSystemPigeon (
  val fromNotification: Boolean,
  val mrp: MessageResponsePigeon
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MessageSystemPigeon {
      val fromNotification = pigeonVar_list[0] as Boolean
      val mrp = pigeonVar_list[1] as MessageResponsePigeon
      return MessageSystemPigeon(fromNotification, mrp)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      fromNotification,
      mrp,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is MessageSystemPigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class RegisterMessagePigeon (
  val messageType: String,
  val sendConnectorID: String,
  val sendDeviceId: String,
  val systemType: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): RegisterMessagePigeon {
      val messageType = pigeonVar_list[0] as String
      val sendConnectorID = pigeonVar_list[1] as String
      val sendDeviceId = pigeonVar_list[2] as String
      val systemType = pigeonVar_list[3] as Long
      return RegisterMessagePigeon(messageType, sendConnectorID, sendDeviceId, systemType)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      messageType,
      sendConnectorID,
      sendDeviceId,
      systemType,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is RegisterMessagePigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PluginSettingsPigeon (
  val host: String? = null,
  val deviceId: String? = null,
  val connectorID: String? = null,
  val systemType: Long? = null,
  val iconNotification: String? = null,
  val port: Long? = null,
  val channelNotification: String? = null,
  val wss: Boolean? = null,
  val wsPath: String? = null,
  val useTcp: Boolean? = null,
  val publicKey: String? = null,
  val connectorTag: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PluginSettingsPigeon {
      val host = pigeonVar_list[0] as String?
      val deviceId = pigeonVar_list[1] as String?
      val connectorID = pigeonVar_list[2] as String?
      val systemType = pigeonVar_list[3] as Long?
      val iconNotification = pigeonVar_list[4] as String?
      val port = pigeonVar_list[5] as Long?
      val channelNotification = pigeonVar_list[6] as String?
      val wss = pigeonVar_list[7] as Boolean?
      val wsPath = pigeonVar_list[8] as String?
      val useTcp = pigeonVar_list[9] as Boolean?
      val publicKey = pigeonVar_list[10] as String?
      val connectorTag = pigeonVar_list[11] as String?
      return PluginSettingsPigeon(host, deviceId, connectorID, systemType, iconNotification, port, channelNotification, wss, wsPath, useTcp, publicKey, connectorTag)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      host,
      deviceId,
      connectorID,
      systemType,
      iconNotification,
      port,
      channelNotification,
      wss,
      wsPath,
      useTcp,
      publicKey,
      connectorTag,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PluginSettingsPigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class MessagesPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ConnectionType.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          TCPModePigeon.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AndroidSettingsPigeon.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          WindowsSettingsPigeon.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          IosSettingsPigeon.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UserPigeon.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NotificationPigeon.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MessageResponsePigeon.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MessageSystemPigeon.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RegisterMessagePigeon.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PluginSettingsPigeon.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is ConnectionType -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is TCPModePigeon -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is AndroidSettingsPigeon -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is WindowsSettingsPigeon -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is IosSettingsPigeon -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is UserPigeon -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is NotificationPigeon -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is MessageResponsePigeon -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is MessageSystemPigeon -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is RegisterMessagePigeon -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is PluginSettingsPigeon -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface LocalPushConnectivityPigeonHostApi {
  fun initialize(systemType: Long, android: AndroidSettingsPigeon?, windows: WindowsSettingsPigeon?, ios: IosSettingsPigeon?, mode: TCPModePigeon, callback: (Result<Boolean>) -> Unit)
  fun flutterApiReady(callback: (Result<Unit>) -> Unit)
  fun config(mode: TCPModePigeon, ssids: List<String>?, callback: (Result<Boolean>) -> Unit)
  fun registerUser(user: UserPigeon, callback: (Result<Boolean>) -> Unit)
  fun deviceID(callback: (Result<String>) -> Unit)
  fun requestPermission(callback: (Result<Boolean>) -> Unit)
  fun start(callback: (Result<Boolean>) -> Unit)
  fun stop(callback: (Result<Boolean>) -> Unit)

  companion object {
    /** The codec used by LocalPushConnectivityPigeonHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
    /** Sets up an instance of `LocalPushConnectivityPigeonHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: LocalPushConnectivityPigeonHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.initialize$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val systemTypeArg = args[0] as Long
            val androidArg = args[1] as AndroidSettingsPigeon?
            val windowsArg = args[2] as WindowsSettingsPigeon?
            val iosArg = args[3] as IosSettingsPigeon?
            val modeArg = args[4] as TCPModePigeon
            api.initialize(systemTypeArg, androidArg, windowsArg, iosArg, modeArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(MessagesPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(MessagesPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.flutterApiReady$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.flutterApiReady{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(MessagesPigeonUtils.wrapError(error))
              } else {
                reply.reply(MessagesPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.config$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val modeArg = args[0] as TCPModePigeon
            val ssidsArg = args[1] as List<String>?
            api.config(modeArg, ssidsArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(MessagesPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(MessagesPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.registerUser$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userArg = args[0] as UserPigeon
            api.registerUser(userArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(MessagesPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(MessagesPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.deviceID$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.deviceID{ result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(MessagesPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(MessagesPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.requestPermission$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.requestPermission{ result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(MessagesPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(MessagesPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.start$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.start{ result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(MessagesPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(MessagesPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.stop$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.stop{ result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(MessagesPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(MessagesPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class LocalPushConnectivityPigeonFlutterApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by LocalPushConnectivityPigeonFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
  }
  fun onMessage(mrpArg: MessageSystemPigeon, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonFlutterApi.onMessage$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(mrpArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(MessagesPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
}
