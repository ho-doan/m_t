// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "messages.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace local_push_connectivity {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

FlutterError CreateConnectionError(const std::string channel_name) {
  return FlutterError(
      "channel-error",
      "Unable to establish connection on channel: '" + channel_name + "'.",
      EncodableValue(""));
}

// TCPModePigeon

TCPModePigeon::TCPModePigeon(
  const std::string& host,
  int64_t port,
  const ConnectionType& connection_type)
 : host_(host),
    port_(port),
    connection_type_(connection_type) {}

TCPModePigeon::TCPModePigeon(
  const std::string& host,
  int64_t port,
  const ConnectionType& connection_type,
  const std::string* path,
  const std::string* public_has_key,
  const std::string* cn_name,
  const std::string* dns_name)
 : host_(host),
    port_(port),
    connection_type_(connection_type),
    path_(path ? std::optional<std::string>(*path) : std::nullopt),
    public_has_key_(public_has_key ? std::optional<std::string>(*public_has_key) : std::nullopt),
    cn_name_(cn_name ? std::optional<std::string>(*cn_name) : std::nullopt),
    dns_name_(dns_name ? std::optional<std::string>(*dns_name) : std::nullopt) {}

const std::string& TCPModePigeon::host() const {
  return host_;
}

void TCPModePigeon::set_host(std::string_view value_arg) {
  host_ = value_arg;
}


int64_t TCPModePigeon::port() const {
  return port_;
}

void TCPModePigeon::set_port(int64_t value_arg) {
  port_ = value_arg;
}


const ConnectionType& TCPModePigeon::connection_type() const {
  return connection_type_;
}

void TCPModePigeon::set_connection_type(const ConnectionType& value_arg) {
  connection_type_ = value_arg;
}


const std::string* TCPModePigeon::path() const {
  return path_ ? &(*path_) : nullptr;
}

void TCPModePigeon::set_path(const std::string_view* value_arg) {
  path_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void TCPModePigeon::set_path(std::string_view value_arg) {
  path_ = value_arg;
}


const std::string* TCPModePigeon::public_has_key() const {
  return public_has_key_ ? &(*public_has_key_) : nullptr;
}

void TCPModePigeon::set_public_has_key(const std::string_view* value_arg) {
  public_has_key_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void TCPModePigeon::set_public_has_key(std::string_view value_arg) {
  public_has_key_ = value_arg;
}


const std::string* TCPModePigeon::cn_name() const {
  return cn_name_ ? &(*cn_name_) : nullptr;
}

void TCPModePigeon::set_cn_name(const std::string_view* value_arg) {
  cn_name_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void TCPModePigeon::set_cn_name(std::string_view value_arg) {
  cn_name_ = value_arg;
}


const std::string* TCPModePigeon::dns_name() const {
  return dns_name_ ? &(*dns_name_) : nullptr;
}

void TCPModePigeon::set_dns_name(const std::string_view* value_arg) {
  dns_name_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void TCPModePigeon::set_dns_name(std::string_view value_arg) {
  dns_name_ = value_arg;
}


EncodableList TCPModePigeon::ToEncodableList() const {
  EncodableList list;
  list.reserve(7);
  list.push_back(EncodableValue(host_));
  list.push_back(EncodableValue(port_));
  list.push_back(CustomEncodableValue(connection_type_));
  list.push_back(path_ ? EncodableValue(*path_) : EncodableValue());
  list.push_back(public_has_key_ ? EncodableValue(*public_has_key_) : EncodableValue());
  list.push_back(cn_name_ ? EncodableValue(*cn_name_) : EncodableValue());
  list.push_back(dns_name_ ? EncodableValue(*dns_name_) : EncodableValue());
  return list;
}

TCPModePigeon TCPModePigeon::FromEncodableList(const EncodableList& list) {
  TCPModePigeon decoded(
    std::get<std::string>(list[0]),
    std::get<int64_t>(list[1]),
    std::any_cast<const ConnectionType&>(std::get<CustomEncodableValue>(list[2])));
  auto& encodable_path = list[3];
  if (!encodable_path.IsNull()) {
    decoded.set_path(std::get<std::string>(encodable_path));
  }
  auto& encodable_public_has_key = list[4];
  if (!encodable_public_has_key.IsNull()) {
    decoded.set_public_has_key(std::get<std::string>(encodable_public_has_key));
  }
  auto& encodable_cn_name = list[5];
  if (!encodable_cn_name.IsNull()) {
    decoded.set_cn_name(std::get<std::string>(encodable_cn_name));
  }
  auto& encodable_dns_name = list[6];
  if (!encodable_dns_name.IsNull()) {
    decoded.set_dns_name(std::get<std::string>(encodable_dns_name));
  }
  return decoded;
}

// AndroidSettingsPigeon

AndroidSettingsPigeon::AndroidSettingsPigeon(
  const std::string& icon,
  const std::string& channel_notification)
 : icon_(icon),
    channel_notification_(channel_notification) {}

const std::string& AndroidSettingsPigeon::icon() const {
  return icon_;
}

void AndroidSettingsPigeon::set_icon(std::string_view value_arg) {
  icon_ = value_arg;
}


const std::string& AndroidSettingsPigeon::channel_notification() const {
  return channel_notification_;
}

void AndroidSettingsPigeon::set_channel_notification(std::string_view value_arg) {
  channel_notification_ = value_arg;
}


EncodableList AndroidSettingsPigeon::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(icon_));
  list.push_back(EncodableValue(channel_notification_));
  return list;
}

AndroidSettingsPigeon AndroidSettingsPigeon::FromEncodableList(const EncodableList& list) {
  AndroidSettingsPigeon decoded(
    std::get<std::string>(list[0]),
    std::get<std::string>(list[1]));
  return decoded;
}

// WindowsSettingsPigeon

WindowsSettingsPigeon::WindowsSettingsPigeon(
  const std::string& display_name,
  const std::string& bundle_id,
  const std::string& icon,
  const std::string& icon_content)
 : display_name_(display_name),
    bundle_id_(bundle_id),
    icon_(icon),
    icon_content_(icon_content) {}

const std::string& WindowsSettingsPigeon::display_name() const {
  return display_name_;
}

void WindowsSettingsPigeon::set_display_name(std::string_view value_arg) {
  display_name_ = value_arg;
}


const std::string& WindowsSettingsPigeon::bundle_id() const {
  return bundle_id_;
}

void WindowsSettingsPigeon::set_bundle_id(std::string_view value_arg) {
  bundle_id_ = value_arg;
}


const std::string& WindowsSettingsPigeon::icon() const {
  return icon_;
}

void WindowsSettingsPigeon::set_icon(std::string_view value_arg) {
  icon_ = value_arg;
}


const std::string& WindowsSettingsPigeon::icon_content() const {
  return icon_content_;
}

void WindowsSettingsPigeon::set_icon_content(std::string_view value_arg) {
  icon_content_ = value_arg;
}


EncodableList WindowsSettingsPigeon::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(EncodableValue(display_name_));
  list.push_back(EncodableValue(bundle_id_));
  list.push_back(EncodableValue(icon_));
  list.push_back(EncodableValue(icon_content_));
  return list;
}

WindowsSettingsPigeon WindowsSettingsPigeon::FromEncodableList(const EncodableList& list) {
  WindowsSettingsPigeon decoded(
    std::get<std::string>(list[0]),
    std::get<std::string>(list[1]),
    std::get<std::string>(list[2]),
    std::get<std::string>(list[3]));
  return decoded;
}

// IosSettingsPigeon

IosSettingsPigeon::IosSettingsPigeon() {}

IosSettingsPigeon::IosSettingsPigeon(const EncodableList* ssids)
 : ssids_(ssids ? std::optional<EncodableList>(*ssids) : std::nullopt) {}

const EncodableList* IosSettingsPigeon::ssids() const {
  return ssids_ ? &(*ssids_) : nullptr;
}

void IosSettingsPigeon::set_ssids(const EncodableList* value_arg) {
  ssids_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void IosSettingsPigeon::set_ssids(const EncodableList& value_arg) {
  ssids_ = value_arg;
}


EncodableList IosSettingsPigeon::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(ssids_ ? EncodableValue(*ssids_) : EncodableValue());
  return list;
}

IosSettingsPigeon IosSettingsPigeon::FromEncodableList(const EncodableList& list) {
  IosSettingsPigeon decoded;
  auto& encodable_ssids = list[0];
  if (!encodable_ssids.IsNull()) {
    decoded.set_ssids(std::get<EncodableList>(encodable_ssids));
  }
  return decoded;
}

// UserPigeon

UserPigeon::UserPigeon(
  const std::string& connector_i_d,
  const std::string& connector_tag)
 : connector_i_d_(connector_i_d),
    connector_tag_(connector_tag) {}

const std::string& UserPigeon::connector_i_d() const {
  return connector_i_d_;
}

void UserPigeon::set_connector_i_d(std::string_view value_arg) {
  connector_i_d_ = value_arg;
}


const std::string& UserPigeon::connector_tag() const {
  return connector_tag_;
}

void UserPigeon::set_connector_tag(std::string_view value_arg) {
  connector_tag_ = value_arg;
}


EncodableList UserPigeon::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(connector_i_d_));
  list.push_back(EncodableValue(connector_tag_));
  return list;
}

UserPigeon UserPigeon::FromEncodableList(const EncodableList& list) {
  UserPigeon decoded(
    std::get<std::string>(list[0]),
    std::get<std::string>(list[1]));
  return decoded;
}

// NotificationPigeon

NotificationPigeon::NotificationPigeon(
  const std::string& title,
  const std::string& body)
 : title_(title),
    body_(body) {}

const std::string& NotificationPigeon::title() const {
  return title_;
}

void NotificationPigeon::set_title(std::string_view value_arg) {
  title_ = value_arg;
}


const std::string& NotificationPigeon::body() const {
  return body_;
}

void NotificationPigeon::set_body(std::string_view value_arg) {
  body_ = value_arg;
}


EncodableList NotificationPigeon::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(title_));
  list.push_back(EncodableValue(body_));
  return list;
}

NotificationPigeon NotificationPigeon::FromEncodableList(const EncodableList& list) {
  NotificationPigeon decoded(
    std::get<std::string>(list[0]),
    std::get<std::string>(list[1]));
  return decoded;
}

// MessageResponsePigeon

MessageResponsePigeon::MessageResponsePigeon(
  const NotificationPigeon& notification,
  const std::string& m_payload)
 : notification_(std::make_unique<NotificationPigeon>(notification)),
    m_payload_(m_payload) {}

MessageResponsePigeon::MessageResponsePigeon(const MessageResponsePigeon& other)
 : notification_(std::make_unique<NotificationPigeon>(*other.notification_)),
    m_payload_(other.m_payload_) {}

MessageResponsePigeon& MessageResponsePigeon::operator=(const MessageResponsePigeon& other) {
  notification_ = std::make_unique<NotificationPigeon>(*other.notification_);
  m_payload_ = other.m_payload_;
  return *this;
}

const NotificationPigeon& MessageResponsePigeon::notification() const {
  return *notification_;
}

void MessageResponsePigeon::set_notification(const NotificationPigeon& value_arg) {
  notification_ = std::make_unique<NotificationPigeon>(value_arg);
}


const std::string& MessageResponsePigeon::m_payload() const {
  return m_payload_;
}

void MessageResponsePigeon::set_m_payload(std::string_view value_arg) {
  m_payload_ = value_arg;
}


EncodableList MessageResponsePigeon::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(CustomEncodableValue(*notification_));
  list.push_back(EncodableValue(m_payload_));
  return list;
}

MessageResponsePigeon MessageResponsePigeon::FromEncodableList(const EncodableList& list) {
  MessageResponsePigeon decoded(
    std::any_cast<const NotificationPigeon&>(std::get<CustomEncodableValue>(list[0])),
    std::get<std::string>(list[1]));
  return decoded;
}

// MessageSystemPigeon

MessageSystemPigeon::MessageSystemPigeon(
  bool from_notification,
  const MessageResponsePigeon& mrp)
 : from_notification_(from_notification),
    mrp_(std::make_unique<MessageResponsePigeon>(mrp)) {}

MessageSystemPigeon::MessageSystemPigeon(const MessageSystemPigeon& other)
 : from_notification_(other.from_notification_),
    mrp_(std::make_unique<MessageResponsePigeon>(*other.mrp_)) {}

MessageSystemPigeon& MessageSystemPigeon::operator=(const MessageSystemPigeon& other) {
  from_notification_ = other.from_notification_;
  mrp_ = std::make_unique<MessageResponsePigeon>(*other.mrp_);
  return *this;
}

bool MessageSystemPigeon::from_notification() const {
  return from_notification_;
}

void MessageSystemPigeon::set_from_notification(bool value_arg) {
  from_notification_ = value_arg;
}


const MessageResponsePigeon& MessageSystemPigeon::mrp() const {
  return *mrp_;
}

void MessageSystemPigeon::set_mrp(const MessageResponsePigeon& value_arg) {
  mrp_ = std::make_unique<MessageResponsePigeon>(value_arg);
}


EncodableList MessageSystemPigeon::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(from_notification_));
  list.push_back(CustomEncodableValue(*mrp_));
  return list;
}

MessageSystemPigeon MessageSystemPigeon::FromEncodableList(const EncodableList& list) {
  MessageSystemPigeon decoded(
    std::get<bool>(list[0]),
    std::any_cast<const MessageResponsePigeon&>(std::get<CustomEncodableValue>(list[1])));
  return decoded;
}

// RegisterMessagePigeon

RegisterMessagePigeon::RegisterMessagePigeon(
  const std::string& message_type,
  const std::string& send_connector_i_d,
  const std::string& send_device_id,
  int64_t system_type)
 : message_type_(message_type),
    send_connector_i_d_(send_connector_i_d),
    send_device_id_(send_device_id),
    system_type_(system_type) {}

const std::string& RegisterMessagePigeon::message_type() const {
  return message_type_;
}

void RegisterMessagePigeon::set_message_type(std::string_view value_arg) {
  message_type_ = value_arg;
}


const std::string& RegisterMessagePigeon::send_connector_i_d() const {
  return send_connector_i_d_;
}

void RegisterMessagePigeon::set_send_connector_i_d(std::string_view value_arg) {
  send_connector_i_d_ = value_arg;
}


const std::string& RegisterMessagePigeon::send_device_id() const {
  return send_device_id_;
}

void RegisterMessagePigeon::set_send_device_id(std::string_view value_arg) {
  send_device_id_ = value_arg;
}


int64_t RegisterMessagePigeon::system_type() const {
  return system_type_;
}

void RegisterMessagePigeon::set_system_type(int64_t value_arg) {
  system_type_ = value_arg;
}


EncodableList RegisterMessagePigeon::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(EncodableValue(message_type_));
  list.push_back(EncodableValue(send_connector_i_d_));
  list.push_back(EncodableValue(send_device_id_));
  list.push_back(EncodableValue(system_type_));
  return list;
}

RegisterMessagePigeon RegisterMessagePigeon::FromEncodableList(const EncodableList& list) {
  RegisterMessagePigeon decoded(
    std::get<std::string>(list[0]),
    std::get<std::string>(list[1]),
    std::get<std::string>(list[2]),
    std::get<int64_t>(list[3]));
  return decoded;
}

// PluginSettingsPigeon

PluginSettingsPigeon::PluginSettingsPigeon() {}

PluginSettingsPigeon::PluginSettingsPigeon(
  const std::string* host,
  const std::string* device_id,
  const std::string* connector_i_d,
  const int64_t* system_type,
  const std::string* icon_notification,
  const int64_t* port,
  const std::string* channel_notification,
  const bool* wss,
  const std::string* ws_path,
  const bool* use_tcp,
  const std::string* public_key,
  const std::string* connector_tag)
 : host_(host ? std::optional<std::string>(*host) : std::nullopt),
    device_id_(device_id ? std::optional<std::string>(*device_id) : std::nullopt),
    connector_i_d_(connector_i_d ? std::optional<std::string>(*connector_i_d) : std::nullopt),
    system_type_(system_type ? std::optional<int64_t>(*system_type) : std::nullopt),
    icon_notification_(icon_notification ? std::optional<std::string>(*icon_notification) : std::nullopt),
    port_(port ? std::optional<int64_t>(*port) : std::nullopt),
    channel_notification_(channel_notification ? std::optional<std::string>(*channel_notification) : std::nullopt),
    wss_(wss ? std::optional<bool>(*wss) : std::nullopt),
    ws_path_(ws_path ? std::optional<std::string>(*ws_path) : std::nullopt),
    use_tcp_(use_tcp ? std::optional<bool>(*use_tcp) : std::nullopt),
    public_key_(public_key ? std::optional<std::string>(*public_key) : std::nullopt),
    connector_tag_(connector_tag ? std::optional<std::string>(*connector_tag) : std::nullopt) {}

const std::string* PluginSettingsPigeon::host() const {
  return host_ ? &(*host_) : nullptr;
}

void PluginSettingsPigeon::set_host(const std::string_view* value_arg) {
  host_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PluginSettingsPigeon::set_host(std::string_view value_arg) {
  host_ = value_arg;
}


const std::string* PluginSettingsPigeon::device_id() const {
  return device_id_ ? &(*device_id_) : nullptr;
}

void PluginSettingsPigeon::set_device_id(const std::string_view* value_arg) {
  device_id_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PluginSettingsPigeon::set_device_id(std::string_view value_arg) {
  device_id_ = value_arg;
}


const std::string* PluginSettingsPigeon::connector_i_d() const {
  return connector_i_d_ ? &(*connector_i_d_) : nullptr;
}

void PluginSettingsPigeon::set_connector_i_d(const std::string_view* value_arg) {
  connector_i_d_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PluginSettingsPigeon::set_connector_i_d(std::string_view value_arg) {
  connector_i_d_ = value_arg;
}


const int64_t* PluginSettingsPigeon::system_type() const {
  return system_type_ ? &(*system_type_) : nullptr;
}

void PluginSettingsPigeon::set_system_type(const int64_t* value_arg) {
  system_type_ = value_arg ? std::optional<int64_t>(*value_arg) : std::nullopt;
}

void PluginSettingsPigeon::set_system_type(int64_t value_arg) {
  system_type_ = value_arg;
}


const std::string* PluginSettingsPigeon::icon_notification() const {
  return icon_notification_ ? &(*icon_notification_) : nullptr;
}

void PluginSettingsPigeon::set_icon_notification(const std::string_view* value_arg) {
  icon_notification_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PluginSettingsPigeon::set_icon_notification(std::string_view value_arg) {
  icon_notification_ = value_arg;
}


const int64_t* PluginSettingsPigeon::port() const {
  return port_ ? &(*port_) : nullptr;
}

void PluginSettingsPigeon::set_port(const int64_t* value_arg) {
  port_ = value_arg ? std::optional<int64_t>(*value_arg) : std::nullopt;
}

void PluginSettingsPigeon::set_port(int64_t value_arg) {
  port_ = value_arg;
}


const std::string* PluginSettingsPigeon::channel_notification() const {
  return channel_notification_ ? &(*channel_notification_) : nullptr;
}

void PluginSettingsPigeon::set_channel_notification(const std::string_view* value_arg) {
  channel_notification_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PluginSettingsPigeon::set_channel_notification(std::string_view value_arg) {
  channel_notification_ = value_arg;
}


const bool* PluginSettingsPigeon::wss() const {
  return wss_ ? &(*wss_) : nullptr;
}

void PluginSettingsPigeon::set_wss(const bool* value_arg) {
  wss_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void PluginSettingsPigeon::set_wss(bool value_arg) {
  wss_ = value_arg;
}


const std::string* PluginSettingsPigeon::ws_path() const {
  return ws_path_ ? &(*ws_path_) : nullptr;
}

void PluginSettingsPigeon::set_ws_path(const std::string_view* value_arg) {
  ws_path_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PluginSettingsPigeon::set_ws_path(std::string_view value_arg) {
  ws_path_ = value_arg;
}


const bool* PluginSettingsPigeon::use_tcp() const {
  return use_tcp_ ? &(*use_tcp_) : nullptr;
}

void PluginSettingsPigeon::set_use_tcp(const bool* value_arg) {
  use_tcp_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void PluginSettingsPigeon::set_use_tcp(bool value_arg) {
  use_tcp_ = value_arg;
}


const std::string* PluginSettingsPigeon::public_key() const {
  return public_key_ ? &(*public_key_) : nullptr;
}

void PluginSettingsPigeon::set_public_key(const std::string_view* value_arg) {
  public_key_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PluginSettingsPigeon::set_public_key(std::string_view value_arg) {
  public_key_ = value_arg;
}


const std::string* PluginSettingsPigeon::connector_tag() const {
  return connector_tag_ ? &(*connector_tag_) : nullptr;
}

void PluginSettingsPigeon::set_connector_tag(const std::string_view* value_arg) {
  connector_tag_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PluginSettingsPigeon::set_connector_tag(std::string_view value_arg) {
  connector_tag_ = value_arg;
}


EncodableList PluginSettingsPigeon::ToEncodableList() const {
  EncodableList list;
  list.reserve(12);
  list.push_back(host_ ? EncodableValue(*host_) : EncodableValue());
  list.push_back(device_id_ ? EncodableValue(*device_id_) : EncodableValue());
  list.push_back(connector_i_d_ ? EncodableValue(*connector_i_d_) : EncodableValue());
  list.push_back(system_type_ ? EncodableValue(*system_type_) : EncodableValue());
  list.push_back(icon_notification_ ? EncodableValue(*icon_notification_) : EncodableValue());
  list.push_back(port_ ? EncodableValue(*port_) : EncodableValue());
  list.push_back(channel_notification_ ? EncodableValue(*channel_notification_) : EncodableValue());
  list.push_back(wss_ ? EncodableValue(*wss_) : EncodableValue());
  list.push_back(ws_path_ ? EncodableValue(*ws_path_) : EncodableValue());
  list.push_back(use_tcp_ ? EncodableValue(*use_tcp_) : EncodableValue());
  list.push_back(public_key_ ? EncodableValue(*public_key_) : EncodableValue());
  list.push_back(connector_tag_ ? EncodableValue(*connector_tag_) : EncodableValue());
  return list;
}

PluginSettingsPigeon PluginSettingsPigeon::FromEncodableList(const EncodableList& list) {
  PluginSettingsPigeon decoded;
  auto& encodable_host = list[0];
  if (!encodable_host.IsNull()) {
    decoded.set_host(std::get<std::string>(encodable_host));
  }
  auto& encodable_device_id = list[1];
  if (!encodable_device_id.IsNull()) {
    decoded.set_device_id(std::get<std::string>(encodable_device_id));
  }
  auto& encodable_connector_i_d = list[2];
  if (!encodable_connector_i_d.IsNull()) {
    decoded.set_connector_i_d(std::get<std::string>(encodable_connector_i_d));
  }
  auto& encodable_system_type = list[3];
  if (!encodable_system_type.IsNull()) {
    decoded.set_system_type(std::get<int64_t>(encodable_system_type));
  }
  auto& encodable_icon_notification = list[4];
  if (!encodable_icon_notification.IsNull()) {
    decoded.set_icon_notification(std::get<std::string>(encodable_icon_notification));
  }
  auto& encodable_port = list[5];
  if (!encodable_port.IsNull()) {
    decoded.set_port(std::get<int64_t>(encodable_port));
  }
  auto& encodable_channel_notification = list[6];
  if (!encodable_channel_notification.IsNull()) {
    decoded.set_channel_notification(std::get<std::string>(encodable_channel_notification));
  }
  auto& encodable_wss = list[7];
  if (!encodable_wss.IsNull()) {
    decoded.set_wss(std::get<bool>(encodable_wss));
  }
  auto& encodable_ws_path = list[8];
  if (!encodable_ws_path.IsNull()) {
    decoded.set_ws_path(std::get<std::string>(encodable_ws_path));
  }
  auto& encodable_use_tcp = list[9];
  if (!encodable_use_tcp.IsNull()) {
    decoded.set_use_tcp(std::get<bool>(encodable_use_tcp));
  }
  auto& encodable_public_key = list[10];
  if (!encodable_public_key.IsNull()) {
    decoded.set_public_key(std::get<std::string>(encodable_public_key));
  }
  auto& encodable_connector_tag = list[11];
  if (!encodable_connector_tag.IsNull()) {
    decoded.set_connector_tag(std::get<std::string>(encodable_connector_tag));
  }
  return decoded;
}


PigeonInternalCodecSerializer::PigeonInternalCodecSerializer() {}

EncodableValue PigeonInternalCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 129: {
        const auto& encodable_enum_arg = ReadValue(stream);
        const int64_t enum_arg_value = encodable_enum_arg.IsNull() ? 0 : encodable_enum_arg.LongValue();
        return encodable_enum_arg.IsNull() ? EncodableValue() : CustomEncodableValue(static_cast<ConnectionType>(enum_arg_value));
      }
    case 130: {
        return CustomEncodableValue(TCPModePigeon::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 131: {
        return CustomEncodableValue(AndroidSettingsPigeon::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 132: {
        return CustomEncodableValue(WindowsSettingsPigeon::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 133: {
        return CustomEncodableValue(IosSettingsPigeon::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 134: {
        return CustomEncodableValue(UserPigeon::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 135: {
        return CustomEncodableValue(NotificationPigeon::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 136: {
        return CustomEncodableValue(MessageResponsePigeon::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 137: {
        return CustomEncodableValue(MessageSystemPigeon::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 138: {
        return CustomEncodableValue(RegisterMessagePigeon::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 139: {
        return CustomEncodableValue(PluginSettingsPigeon::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
    }
}

void PigeonInternalCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(ConnectionType)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(static_cast<int>(std::any_cast<ConnectionType>(*custom_value))), stream);
      return;
    }
    if (custom_value->type() == typeid(TCPModePigeon)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(std::any_cast<TCPModePigeon>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(AndroidSettingsPigeon)) {
      stream->WriteByte(131);
      WriteValue(EncodableValue(std::any_cast<AndroidSettingsPigeon>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(WindowsSettingsPigeon)) {
      stream->WriteByte(132);
      WriteValue(EncodableValue(std::any_cast<WindowsSettingsPigeon>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(IosSettingsPigeon)) {
      stream->WriteByte(133);
      WriteValue(EncodableValue(std::any_cast<IosSettingsPigeon>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(UserPigeon)) {
      stream->WriteByte(134);
      WriteValue(EncodableValue(std::any_cast<UserPigeon>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(NotificationPigeon)) {
      stream->WriteByte(135);
      WriteValue(EncodableValue(std::any_cast<NotificationPigeon>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(MessageResponsePigeon)) {
      stream->WriteByte(136);
      WriteValue(EncodableValue(std::any_cast<MessageResponsePigeon>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(MessageSystemPigeon)) {
      stream->WriteByte(137);
      WriteValue(EncodableValue(std::any_cast<MessageSystemPigeon>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(RegisterMessagePigeon)) {
      stream->WriteByte(138);
      WriteValue(EncodableValue(std::any_cast<RegisterMessagePigeon>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(PluginSettingsPigeon)) {
      stream->WriteByte(139);
      WriteValue(EncodableValue(std::any_cast<PluginSettingsPigeon>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by LocalPushConnectivityPigeonHostApi.
const flutter::StandardMessageCodec& LocalPushConnectivityPigeonHostApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&PigeonInternalCodecSerializer::GetInstance());
}

// Sets up an instance of `LocalPushConnectivityPigeonHostApi` to handle messages through the `binary_messenger`.
void LocalPushConnectivityPigeonHostApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  LocalPushConnectivityPigeonHostApi* api) {
  LocalPushConnectivityPigeonHostApi::SetUp(binary_messenger, api, "");
}

void LocalPushConnectivityPigeonHostApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  LocalPushConnectivityPigeonHostApi* api,
  const std::string& message_channel_suffix) {
  const std::string prepended_suffix = message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "";
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.initialize" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_system_type_arg = args.at(0);
          if (encodable_system_type_arg.IsNull()) {
            reply(WrapError("system_type_arg unexpectedly null."));
            return;
          }
          const int64_t system_type_arg = encodable_system_type_arg.LongValue();
          const auto& encodable_android_arg = args.at(1);
          const auto* android_arg = encodable_android_arg.IsNull() ? nullptr : &(std::any_cast<const AndroidSettingsPigeon&>(std::get<CustomEncodableValue>(encodable_android_arg)));
          const auto& encodable_windows_arg = args.at(2);
          const auto* windows_arg = encodable_windows_arg.IsNull() ? nullptr : &(std::any_cast<const WindowsSettingsPigeon&>(std::get<CustomEncodableValue>(encodable_windows_arg)));
          const auto& encodable_ios_arg = args.at(3);
          const auto* ios_arg = encodable_ios_arg.IsNull() ? nullptr : &(std::any_cast<const IosSettingsPigeon&>(std::get<CustomEncodableValue>(encodable_ios_arg)));
          const auto& encodable_mode_arg = args.at(4);
          if (encodable_mode_arg.IsNull()) {
            reply(WrapError("mode_arg unexpectedly null."));
            return;
          }
          const auto& mode_arg = std::any_cast<const TCPModePigeon&>(std::get<CustomEncodableValue>(encodable_mode_arg));
          api->Initialize(system_type_arg, android_arg, windows_arg, ios_arg, mode_arg, [reply](ErrorOr<bool>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.flutterApiReady" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          api->FlutterApiReady([reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.config" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_mode_arg = args.at(0);
          if (encodable_mode_arg.IsNull()) {
            reply(WrapError("mode_arg unexpectedly null."));
            return;
          }
          const auto& mode_arg = std::any_cast<const TCPModePigeon&>(std::get<CustomEncodableValue>(encodable_mode_arg));
          const auto& encodable_ssids_arg = args.at(1);
          const auto* ssids_arg = std::get_if<EncodableList>(&encodable_ssids_arg);
          api->Config(mode_arg, ssids_arg, [reply](ErrorOr<bool>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.registerUser" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_user_arg = args.at(0);
          if (encodable_user_arg.IsNull()) {
            reply(WrapError("user_arg unexpectedly null."));
            return;
          }
          const auto& user_arg = std::any_cast<const UserPigeon&>(std::get<CustomEncodableValue>(encodable_user_arg));
          api->RegisterUser(user_arg, [reply](ErrorOr<bool>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.deviceID" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          api->DeviceID([reply](ErrorOr<std::string>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.requestPermission" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          api->RequestPermission([reply](ErrorOr<bool>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.start" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          api->Start([reply](ErrorOr<bool>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonHostApi.stop" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          api->Stop([reply](ErrorOr<bool>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
}

EncodableValue LocalPushConnectivityPigeonHostApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue LocalPushConnectivityPigeonHostApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

// Generated class from Pigeon that represents Flutter messages that can be called from C++.
LocalPushConnectivityPigeonFlutterApi::LocalPushConnectivityPigeonFlutterApi(flutter::BinaryMessenger* binary_messenger)
 : binary_messenger_(binary_messenger),
    message_channel_suffix_("") {}

LocalPushConnectivityPigeonFlutterApi::LocalPushConnectivityPigeonFlutterApi(
  flutter::BinaryMessenger* binary_messenger,
  const std::string& message_channel_suffix)
 : binary_messenger_(binary_messenger),
    message_channel_suffix_(message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "") {}

const flutter::StandardMessageCodec& LocalPushConnectivityPigeonFlutterApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&PigeonInternalCodecSerializer::GetInstance());
}

void LocalPushConnectivityPigeonFlutterApi::OnMessage(
  const MessageSystemPigeon& mrp_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.local_push_connectivity.LocalPushConnectivityPigeonFlutterApi.onMessage" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    CustomEncodableValue(mrp_arg),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

}  // namespace local_push_connectivity
