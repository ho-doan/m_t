// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_MESSAGES_G_H_
#define PIGEON_MESSAGES_G_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace local_push_connectivity {


// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code)
    : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class LocalPushConnectivityPigeonHostApi;
  friend class LocalPushConnectivityPigeonFlutterApi;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};


enum class ConnectionType {
  kTcp = 0,
  kTcpTls = 1,
  kWs = 2,
  kWss = 3
};


// Generated class from Pigeon that represents data sent in messages.
class TCPModePigeon {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit TCPModePigeon(
    const std::string& host,
    int64_t port,
    const ConnectionType& connection_type);

  // Constructs an object setting all fields.
  explicit TCPModePigeon(
    const std::string& host,
    int64_t port,
    const ConnectionType& connection_type,
    const std::string* path,
    const std::string* public_has_key,
    const std::string* cn_name,
    const std::string* dns_name);

  const std::string& host() const;
  void set_host(std::string_view value_arg);

  int64_t port() const;
  void set_port(int64_t value_arg);

  const ConnectionType& connection_type() const;
  void set_connection_type(const ConnectionType& value_arg);

  // Path for ws and wss
  const std::string* path() const;
  void set_path(const std::string_view* value_arg);
  void set_path(std::string_view value_arg);

  // for tcpTls
  const std::string* public_has_key() const;
  void set_public_has_key(const std::string_view* value_arg);
  void set_public_has_key(std::string_view value_arg);

  // for tcpTls & Platform windows
  const std::string* cn_name() const;
  void set_cn_name(const std::string_view* value_arg);
  void set_cn_name(std::string_view value_arg);

  // for tcpTls & Platform windows
  const std::string* dns_name() const;
  void set_dns_name(const std::string_view* value_arg);
  void set_dns_name(std::string_view value_arg);

 private:
  static TCPModePigeon FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class LocalPushConnectivityPigeonHostApi;
  friend class LocalPushConnectivityPigeonFlutterApi;
  friend class PigeonInternalCodecSerializer;
  std::string host_;
  int64_t port_;
  ConnectionType connection_type_;
  std::optional<std::string> path_;
  std::optional<std::string> public_has_key_;
  std::optional<std::string> cn_name_;
  std::optional<std::string> dns_name_;
};


// Generated class from Pigeon that represents data sent in messages.
class AndroidSettingsPigeon {
 public:
  // Constructs an object setting all fields.
  explicit AndroidSettingsPigeon(
    const std::string& icon,
    const std::string& channel_notification);

  const std::string& icon() const;
  void set_icon(std::string_view value_arg);

  const std::string& channel_notification() const;
  void set_channel_notification(std::string_view value_arg);

 private:
  static AndroidSettingsPigeon FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class LocalPushConnectivityPigeonHostApi;
  friend class LocalPushConnectivityPigeonFlutterApi;
  friend class PigeonInternalCodecSerializer;
  std::string icon_;
  std::string channel_notification_;
};


// Generated class from Pigeon that represents data sent in messages.
class WindowsSettingsPigeon {
 public:
  // Constructs an object setting all fields.
  explicit WindowsSettingsPigeon(
    const std::string& display_name,
    const std::string& bundle_id,
    const std::string& icon,
    const std::string& icon_content);

  const std::string& display_name() const;
  void set_display_name(std::string_view value_arg);

  const std::string& bundle_id() const;
  void set_bundle_id(std::string_view value_arg);

  const std::string& icon() const;
  void set_icon(std::string_view value_arg);

  const std::string& icon_content() const;
  void set_icon_content(std::string_view value_arg);

 private:
  static WindowsSettingsPigeon FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class LocalPushConnectivityPigeonHostApi;
  friend class LocalPushConnectivityPigeonFlutterApi;
  friend class PigeonInternalCodecSerializer;
  std::string display_name_;
  std::string bundle_id_;
  std::string icon_;
  std::string icon_content_;
};


// Generated class from Pigeon that represents data sent in messages.
class IosSettingsPigeon {
 public:
  // Constructs an object setting all non-nullable fields.
  IosSettingsPigeon();

  // Constructs an object setting all fields.
  explicit IosSettingsPigeon(const flutter::EncodableList* ssids);

  const flutter::EncodableList* ssids() const;
  void set_ssids(const flutter::EncodableList* value_arg);
  void set_ssids(const flutter::EncodableList& value_arg);

 private:
  static IosSettingsPigeon FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class LocalPushConnectivityPigeonHostApi;
  friend class LocalPushConnectivityPigeonFlutterApi;
  friend class PigeonInternalCodecSerializer;
  std::optional<flutter::EncodableList> ssids_;
};


// Generated class from Pigeon that represents data sent in messages.
class UserPigeon {
 public:
  // Constructs an object setting all fields.
  explicit UserPigeon(
    const std::string& connector_i_d,
    const std::string& connector_tag);

  const std::string& connector_i_d() const;
  void set_connector_i_d(std::string_view value_arg);

  const std::string& connector_tag() const;
  void set_connector_tag(std::string_view value_arg);

 private:
  static UserPigeon FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class LocalPushConnectivityPigeonHostApi;
  friend class LocalPushConnectivityPigeonFlutterApi;
  friend class PigeonInternalCodecSerializer;
  std::string connector_i_d_;
  std::string connector_tag_;
};


// Generated class from Pigeon that represents data sent in messages.
class NotificationPigeon {
 public:
  // Constructs an object setting all fields.
  explicit NotificationPigeon(
    const std::string& title,
    const std::string& body);

  const std::string& title() const;
  void set_title(std::string_view value_arg);

  const std::string& body() const;
  void set_body(std::string_view value_arg);

 private:
  static NotificationPigeon FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class MessageResponsePigeon;
  friend class LocalPushConnectivityPigeonHostApi;
  friend class LocalPushConnectivityPigeonFlutterApi;
  friend class PigeonInternalCodecSerializer;
  std::string title_;
  std::string body_;
};


// Generated class from Pigeon that represents data sent in messages.
class MessageResponsePigeon {
 public:
  // Constructs an object setting all fields.
  explicit MessageResponsePigeon(
    const NotificationPigeon& notification,
    const std::string& m_payload);

  ~MessageResponsePigeon() = default;
  MessageResponsePigeon(const MessageResponsePigeon& other);
  MessageResponsePigeon& operator=(const MessageResponsePigeon& other);
  MessageResponsePigeon(MessageResponsePigeon&& other) = default;
  MessageResponsePigeon& operator=(MessageResponsePigeon&& other) noexcept = default;
  const NotificationPigeon& notification() const;
  void set_notification(const NotificationPigeon& value_arg);

  const std::string& m_payload() const;
  void set_m_payload(std::string_view value_arg);

 private:
  static MessageResponsePigeon FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class MessageSystemPigeon;
  friend class LocalPushConnectivityPigeonHostApi;
  friend class LocalPushConnectivityPigeonFlutterApi;
  friend class PigeonInternalCodecSerializer;
  std::unique_ptr<NotificationPigeon> notification_;
  std::string m_payload_;
};


// Generated class from Pigeon that represents data sent in messages.
class MessageSystemPigeon {
 public:
  // Constructs an object setting all fields.
  explicit MessageSystemPigeon(
    bool from_notification,
    const MessageResponsePigeon& mrp);

  ~MessageSystemPigeon() = default;
  MessageSystemPigeon(const MessageSystemPigeon& other);
  MessageSystemPigeon& operator=(const MessageSystemPigeon& other);
  MessageSystemPigeon(MessageSystemPigeon&& other) = default;
  MessageSystemPigeon& operator=(MessageSystemPigeon&& other) noexcept = default;
  bool from_notification() const;
  void set_from_notification(bool value_arg);

  const MessageResponsePigeon& mrp() const;
  void set_mrp(const MessageResponsePigeon& value_arg);

 private:
  static MessageSystemPigeon FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class LocalPushConnectivityPigeonHostApi;
  friend class LocalPushConnectivityPigeonFlutterApi;
  friend class PigeonInternalCodecSerializer;
  bool from_notification_;
  std::unique_ptr<MessageResponsePigeon> mrp_;
};


// Generated class from Pigeon that represents data sent in messages.
class RegisterMessagePigeon {
 public:
  // Constructs an object setting all fields.
  explicit RegisterMessagePigeon(
    const std::string& message_type,
    const std::string& send_connector_i_d,
    const std::string& send_device_id,
    int64_t system_type);

  const std::string& message_type() const;
  void set_message_type(std::string_view value_arg);

  const std::string& send_connector_i_d() const;
  void set_send_connector_i_d(std::string_view value_arg);

  const std::string& send_device_id() const;
  void set_send_device_id(std::string_view value_arg);

  int64_t system_type() const;
  void set_system_type(int64_t value_arg);

 private:
  static RegisterMessagePigeon FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class LocalPushConnectivityPigeonHostApi;
  friend class LocalPushConnectivityPigeonFlutterApi;
  friend class PigeonInternalCodecSerializer;
  std::string message_type_;
  std::string send_connector_i_d_;
  std::string send_device_id_;
  int64_t system_type_;
};


// Generated class from Pigeon that represents data sent in messages.
class PluginSettingsPigeon {
 public:
  // Constructs an object setting all non-nullable fields.
  PluginSettingsPigeon();

  // Constructs an object setting all fields.
  explicit PluginSettingsPigeon(
    const std::string* host,
    const std::string* device_id,
    const std::string* connector_i_d,
    const int64_t* system_type,
    const std::string* icon_notification,
    const int64_t* port,
    const std::string* channel_notification,
    const bool* wss,
    const std::string* ws_path,
    const bool* use_tcp,
    const std::string* public_key,
    const std::string* connector_tag);

  const std::string* host() const;
  void set_host(const std::string_view* value_arg);
  void set_host(std::string_view value_arg);

  const std::string* device_id() const;
  void set_device_id(const std::string_view* value_arg);
  void set_device_id(std::string_view value_arg);

  const std::string* connector_i_d() const;
  void set_connector_i_d(const std::string_view* value_arg);
  void set_connector_i_d(std::string_view value_arg);

  const int64_t* system_type() const;
  void set_system_type(const int64_t* value_arg);
  void set_system_type(int64_t value_arg);

  const std::string* icon_notification() const;
  void set_icon_notification(const std::string_view* value_arg);
  void set_icon_notification(std::string_view value_arg);

  const int64_t* port() const;
  void set_port(const int64_t* value_arg);
  void set_port(int64_t value_arg);

  const std::string* channel_notification() const;
  void set_channel_notification(const std::string_view* value_arg);
  void set_channel_notification(std::string_view value_arg);

  const bool* wss() const;
  void set_wss(const bool* value_arg);
  void set_wss(bool value_arg);

  const std::string* ws_path() const;
  void set_ws_path(const std::string_view* value_arg);
  void set_ws_path(std::string_view value_arg);

  const bool* use_tcp() const;
  void set_use_tcp(const bool* value_arg);
  void set_use_tcp(bool value_arg);

  const std::string* public_key() const;
  void set_public_key(const std::string_view* value_arg);
  void set_public_key(std::string_view value_arg);

  const std::string* connector_tag() const;
  void set_connector_tag(const std::string_view* value_arg);
  void set_connector_tag(std::string_view value_arg);

 private:
  static PluginSettingsPigeon FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class LocalPushConnectivityPigeonHostApi;
  friend class LocalPushConnectivityPigeonFlutterApi;
  friend class PigeonInternalCodecSerializer;
  std::optional<std::string> host_;
  std::optional<std::string> device_id_;
  std::optional<std::string> connector_i_d_;
  std::optional<int64_t> system_type_;
  std::optional<std::string> icon_notification_;
  std::optional<int64_t> port_;
  std::optional<std::string> channel_notification_;
  std::optional<bool> wss_;
  std::optional<std::string> ws_path_;
  std::optional<bool> use_tcp_;
  std::optional<std::string> public_key_;
  std::optional<std::string> connector_tag_;
};


class PigeonInternalCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  PigeonInternalCodecSerializer();
  inline static PigeonInternalCodecSerializer& GetInstance() {
    static PigeonInternalCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;
 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;
};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class LocalPushConnectivityPigeonHostApi {
 public:
  LocalPushConnectivityPigeonHostApi(const LocalPushConnectivityPigeonHostApi&) = delete;
  LocalPushConnectivityPigeonHostApi& operator=(const LocalPushConnectivityPigeonHostApi&) = delete;
  virtual ~LocalPushConnectivityPigeonHostApi() {}
  virtual void Initialize(
    int64_t system_type,
    const AndroidSettingsPigeon* android,
    const WindowsSettingsPigeon* windows,
    const IosSettingsPigeon* ios,
    const TCPModePigeon& mode,
    std::function<void(ErrorOr<bool> reply)> result) = 0;
  virtual void FlutterApiReady(std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void Config(
    const TCPModePigeon& mode,
    const flutter::EncodableList* ssids,
    std::function<void(ErrorOr<bool> reply)> result) = 0;
  virtual void RegisterUser(
    const UserPigeon& user,
    std::function<void(ErrorOr<bool> reply)> result) = 0;
  virtual void DeviceID(std::function<void(ErrorOr<std::string> reply)> result) = 0;
  virtual void RequestPermission(std::function<void(ErrorOr<bool> reply)> result) = 0;
  virtual void Start(std::function<void(ErrorOr<bool> reply)> result) = 0;
  virtual void Stop(std::function<void(ErrorOr<bool> reply)> result) = 0;

  // The codec used by LocalPushConnectivityPigeonHostApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `LocalPushConnectivityPigeonHostApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    LocalPushConnectivityPigeonHostApi* api);
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    LocalPushConnectivityPigeonHostApi* api,
    const std::string& message_channel_suffix);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);
 protected:
  LocalPushConnectivityPigeonHostApi() = default;
};
// Generated class from Pigeon that represents Flutter messages that can be called from C++.
class LocalPushConnectivityPigeonFlutterApi {
 public:
  LocalPushConnectivityPigeonFlutterApi(flutter::BinaryMessenger* binary_messenger);
  LocalPushConnectivityPigeonFlutterApi(
    flutter::BinaryMessenger* binary_messenger,
    const std::string& message_channel_suffix);
  static const flutter::StandardMessageCodec& GetCodec();
  void OnMessage(
    const MessageSystemPigeon& mrp,
    std::function<void(void)>&& on_success,
    std::function<void(const FlutterError&)>&& on_error);
 private:
  flutter::BinaryMessenger* binary_messenger_;
  std::string message_channel_suffix_;
};

}  // namespace local_push_connectivity
#endif  // PIGEON_MESSAGES_G_H_
